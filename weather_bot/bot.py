import telebot
from telebot import types
import psycopg2
import logging
import os
import requests
import pytz
import schedule
import time
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_KEY = os.getenv('OPENWEATHER_API_KEY')
DB_NAME = os.getenv('DB_NAME')
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_HOST = os.getenv('DB_HOST')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    return psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_user_subscription(user_id, is_active):
    with create_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            if cursor.fetchone():
                cursor.execute('UPDATE users SET is_active = %s WHERE user_id = %s', (is_active, user_id))
            else:
                cursor.execute('INSERT INTO users (user_id, is_active) VALUES (%s, %s)', (user_id, is_active))
            conn.commit()

def fetch_weather():
    url = f"http://api.openweathermap.org/data/2.5/forecast?q=Almaty&appid={API_KEY}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        today = datetime.now().strftime('%Y-%m-%d')
        forecasts = [item for item in data['list'] if item['dt_txt'].startswith(today)]
        weather_info = "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–≥–æ–¥—ã –∏ —ç–º–æ–¥–∑–∏
        weather_emojis = {
            "Clear": "‚òÄÔ∏è",
            "Clouds": "‚òÅÔ∏è",
            "Rain": "üåßÔ∏è",
            "Drizzle": "üå¶Ô∏è",
            "Thunderstorm": "‚õàÔ∏è",
            "Snow": "‚ùÑÔ∏è",
            "Mist": "üå´Ô∏è",
            "Smoke": "üí®",
            "Haze": "üå´Ô∏è",
            "Dust": "üå™Ô∏è",
            "Fog": "üåÅ",
            "Sand": "üèúÔ∏è",
            "Ash": "üåã",
            "Squall": "üå¨Ô∏è",
            "Tornado": "üå™Ô∏è"
        }

        for forecast in forecasts:
            time = forecast['dt_txt'].split(' ')[1][:5]
            temp = forecast['main']['temp']
            description = forecast['weather'][0]['description']
            main_weather = forecast['weather'][0]['main']
            emoji = weather_emojis.get(main_weather, "")
            weather_info += f"{time} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, {description} {emoji}\n"
        return weather_info
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_weather():
    with create_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute('SELECT user_id FROM users WHERE is_active = TRUE')
            users = cursor.fetchall()
            weather_info = fetch_weather()
            for user in users:
                bot.send_message(user[0], weather_info)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –≤ 8 —É—Ç—Ä–∞ –ø–æ –ê–ª–º–∞—Ç—ã
almaty_tz = pytz.timezone('Asia/Almaty')
schedule.every().day.at("08:00").do(send_weather)  

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ö–æ–º–∞–Ω–¥–∞ start –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø–∏—Å–∫–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É'])
def handle_subscription(message):
    if message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É':
        update_user_subscription(message.chat.id, True)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    elif message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
        update_user_subscription(message.chat.id, False)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É':
        weather_info = fetch_weather()
        bot.send_message(message.chat.id, weather_info)

if __name__ == '__main__':
    import threading
    t = threading.Thread(target=schedule_checker)
    t.start()
    bot.polling(non_stop=True)
